#include <HardwareSerial.h>
#include <Bluepad32.h>

#define RXD2 16  // ESP32 RX pin (Connect to Uno TX)
#define TXD2 17  // ESP32 TX pin (Connect to Uno RX)

HardwareSerial mySerial(2);
ControllerPtr myControllers[BP32_MAX_GAMEPADS];

void onConnectedController(ControllerPtr ctl) {
    for (int i = 0; i < BP32_MAX_GAMEPADS; i++) {
        if (myControllers[i] == nullptr) {
            myControllers[i] = ctl;
            break;
        }
    }
}

void onDisconnectedController(ControllerPtr ctl) {
    for (int i = 0; i < BP32_MAX_GAMEPADS; i++) {
        if (myControllers[i] == ctl) {
            myControllers[i] = nullptr;
            break;
        }
    }
}

void processGamepad(ControllerPtr ctl) {
    int motor1 = map(ctl->axisY(), -511, 512, -150, 150);
    int motor2 = map(ctl->axisRY(), -511, 512, -150, 150);
    int motor3 = map(ctl->axisX(), -511, 512, -150, 150);
    int motor4 = map(ctl->axisRX(), -511, 512, -150, 150);
    
    String data = "M1:" + String(motor1) + ",M2:" + String(motor2) + ",M3:" + String(motor3) + ",M4:" + String(motor4) + "\n";
    mySerial.print(data);
    Serial.println("Sent: " + data);  // Debugging output
}

void processControllers() {
    for (auto myController : myControllers) {
        if (myController && myController->isConnected() && myController->hasData()) {
            processGamepad(myController);
        }
    }
}

void setup() {
    Serial.begin(115200);  // Lower the baud rate for debugging
    mySerial.begin(115200, SERIAL_8N1, RXD2, TXD2);  // Match baud rate with Uno
    BP32.setup(&onConnectedController, &onDisconnectedController);
    BP32.forgetBluetoothKeys();
    BP32.enableVirtualDevice(false);
}

void loop() {
    bool dataUpdated = BP32.update();
    if (dataUpdated) {
        processControllers();
    }
    delay(100);  // Lower the frequency of data updates
}
